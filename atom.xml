<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Renpingjun&#39;s Blog</title>
  <subtitle>Open your API to change the internet, open your mind to change the world.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.renpingjun.top/"/>
  <updated>2018-05-31T06:16:41.977Z</updated>
  <id>http://www.renpingjun.top/</id>
  
  <author>
    <name>Renpingjun</name>
    <email>ganrenping@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux命令学习：数学运算</title>
    <link href="http://www.renpingjun.top/2018/05/15/heuaa1q2/"/>
    <id>http://www.renpingjun.top/2018/05/15/heuaa1q2/</id>
    <published>2018-05-15T12:03:00.000Z</published>
    <updated>2018-05-31T06:16:41.977Z</updated>
    
    <content type="html"><![CDATA[<p>在Linux系统中，有很多不同的命令行工具可以完成数字运算，比如说expr、factor、jot 和 bc 命令。</p>
<h2 id="一-expr"><a href="#一-expr" class="headerlink" title="一 expr"></a>一 expr</h2><p>首先，对于在命令行使用命令进行数学运算，可能最容易想到、最常用的命令就是 expr （表达式expression。它可以完成四则运算，也可以用于比较大小。下面是几个例子：</p>
<h3 id="变量递增"><a href="#变量递增" class="headerlink" title="变量递增"></a>变量递增</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ count=0</div><div class="line">$ count=`expr $count + 1`</div><div class="line">$ echo $count</div><div class="line">1</div></pre></td></tr></table></figure>
<h3 id="完成简单运算"><a href="#完成简单运算" class="headerlink" title="完成简单运算"></a>完成简单运算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ expr 11 + 123</div><div class="line">134</div><div class="line">$ expr 134 / 11</div><div class="line">12</div><div class="line">$ expr 134 - 11</div><div class="line">123</div><div class="line">$ expr 11 * 123</div><div class="line">expr: syntax error      &lt;== oops!</div><div class="line">$ expr 11 \* 123</div><div class="line">1353</div><div class="line">$ expr 20 % 3</div><div class="line">2</div></pre></td></tr></table></figure>
<p>注意，你需要在 * 运算符之前增加 \ 符号，避免语法错误。% 运算符用于取余运算。</p>
<p>下面是一个稍微复杂的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">participants=11</div><div class="line">total=156</div><div class="line">share=`expr $total / $participants`</div><div class="line">remaining=`expr $total - $participants \* $share`</div><div class="line">echo $share</div><div class="line">14</div><div class="line">echo $remaining</div><div class="line">2</div></pre></td></tr></table></figure></p>
<p>假设某个活动中有 11 位参与者，需要颁发的奖项总数为 156，那么平均每个参与者获得 14 项奖项，额外剩余 2 个奖项。</p>
<h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>下面让我们看一下比较的操作。从第一印象来看，语句看似有些怪异；这里并不是设置数值，而是进行数字比较。在本例中 expr 判断表达式是否为真：如果结果是 1，那么表达式为真；反之，表达式为假。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ expr 11 = 11</div><div class="line">1</div><div class="line">$ expr 11 = 12</div><div class="line">0</div></pre></td></tr></table></figure>
<p>请读作“11 是否等于 11？”及“11 是否等于 12？”，你很快就会习惯这种写法。当然，我们不会在命令行上执行上述比较，可能的比较是 $age 是否等于 11。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ age=11</div><div class="line">$ expr $age = 11</div><div class="line">1</div></pre></td></tr></table></figure>
<p>如果将数字放到引号中间，那么你将进行字符串比较，而不是数值比较。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ expr &quot;11&quot; = &quot;11&quot;</div><div class="line">1</div><div class="line">$ expr &quot;eleven&quot; = &quot;11&quot;</div><div class="line">0</div></pre></td></tr></table></figure>
<p>在本例中，我们判断 10 是否大于 5，以及是否大于 99。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ expr 10 \&gt; 5</div><div class="line">1</div><div class="line">$ expr 10 \&gt; 99</div><div class="line">0</div></pre></td></tr></table></figure></p>
<p>的确，返回 1 和 0 分别代表比较的结果为真和假，我们一般预期在 Linux 上得到这个结果。在下面的例子中，按照上述逻辑使用 expr 并不正确，因为 if 的工作原理刚好相反，即 0 代表真。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">echo -n &quot;Cost to us&gt; &quot;</div><div class="line">read cost</div><div class="line">echo -n &quot;Price we&apos;re asking&gt; &quot;</div><div class="line">read price</div><div class="line"></div><div class="line">if [ `expr $price \&gt; $cost` ]; then</div><div class="line"> echo &quot;We make money&quot;</div><div class="line">else</div><div class="line"> echo &quot;Don&apos;t sell it&quot;</div><div class="line">fi</div></pre></td></tr></table></figure></p>
<p>下面，我们运行这个脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ ./checkPrice</div><div class="line">Cost to us&gt; 11.50</div><div class="line">Price we&apos;re asking&gt; 6</div><div class="line">We make money</div></pre></td></tr></table></figure></p>
<p>这显然与我们预期不符！我们稍微修改一下，以便使其按我们预期工作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">echo -n &quot;Cost to us&gt; &quot;</div><div class="line">read cost</div><div class="line">echo -n &quot;Price we&apos;re asking&gt; &quot;</div><div class="line">read price</div><div class="line"></div><div class="line">if [ `expr $price \&gt; $cost` == 1 ]; then</div><div class="line"> echo &quot;We make money&quot;</div><div class="line">else</div><div class="line"> echo &quot;Don&apos;t sell it&quot;</div><div class="line">fi</div></pre></td></tr></table></figure></p>
<h2 id="二-factor"><a href="#二-factor" class="headerlink" title="二 factor"></a>二 factor</h2><p>factor命令用来计算输入数字的因子。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ factor 111</div><div class="line">111: 3 37</div><div class="line">$ factor 134</div><div class="line">134: 2 67</div><div class="line">$ factor 17894</div><div class="line">17894: 2 23 389</div><div class="line">$ factor 1987</div><div class="line">1987: 1987</div></pre></td></tr></table></figure>
<h2 id="三-jot"><a href="#三-jot" class="headerlink" title="三 jot"></a>三 jot</h2><p>jot 命令可以创建一系列数字。给定数字总数及起始数字即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ jot 8 10</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td></tr></table></figure>
<p>你也可以用如下方式使用 jot，这里我们要求递减至数字 2。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ jot 4 10 2</div><div class="line">10</div><div class="line">7</div><div class="line">5</div><div class="line">2</div></pre></td></tr></table></figure>
<p>jot 可以帮你构造一系列数字组成的列表，该列表可以用于其它任务。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ for i in `jot 7 17`; do echo April $i; done</div><div class="line">April 17</div><div class="line">April 18</div><div class="line">April 19</div><div class="line">April 20</div><div class="line">April 21</div><div class="line">April 22</div><div class="line">April 23</div></pre></td></tr></table></figure>
<h2 id="四-bc"><a href="#四-bc" class="headerlink" title="四 bc"></a>四 bc</h2><p>bc 基本上是命令行数学运算最佳工具之一。输入你想执行的运算，使用管道发送至该命令即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ echo &quot;123.4+5/6-(7.89*1.234)&quot; | bc</div><div class="line">113.664</div></pre></td></tr></table></figure>
<p>可见 bc 并没有忽略精度，而且输入的字符串也相当直截了当。它还可以进行大小比较、处理布尔值、计算平方根、正弦、余弦和正切等。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ echo &quot;sqrt(256)&quot; | bc</div><div class="line">16</div><div class="line">$ echo &quot;s(90)&quot; | bc -l</div><div class="line">.89399666360055789051</div></pre></td></tr></table></figure>
<p>事实上，bc 甚至可以计算 pi。你需要指定需要的精度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ echo &quot;scale=5; 4*a(1)&quot; | bc -l</div><div class="line">3.14156</div><div class="line">$ echo &quot;scale=10; 4*a(1)&quot; | bc -l</div><div class="line">3.1415926532</div><div class="line">$ echo &quot;scale=20; 4*a(1)&quot; | bc -l</div><div class="line">3.14159265358979323844</div><div class="line">$ echo &quot;scale=40; 4*a(1)&quot; | bc -l</div><div class="line">3.1415926535897932384626433832795028841968</div></pre></td></tr></table></figure></p>
<p>除了通过管道接收数据并返回结果，bc还可以交互式运行，输入你想执行的运算即可。本例中提到的 scale 设置可以指定有效数字的个数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ bc</div><div class="line">bc 1.06.95</div><div class="line">Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006 Free Software Foundation, Inc.</div><div class="line">This is free software with ABSOLUTELY NO WARRANTY.</div><div class="line">For details type `warranty&apos;.</div><div class="line">scale=2</div><div class="line">3/4</div><div class="line">.75</div><div class="line">2/3</div><div class="line">.66</div><div class="line">quit</div></pre></td></tr></table></figure></p>
<p>你还可以使用 bc 完成数字进制转换。obase 用于设置输出的数字进制。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ bc</div><div class="line">bc 1.06.95</div><div class="line">Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006 Free Software Foundation, Inc.</div><div class="line">This is free software with ABSOLUTELY NO WARRANTY.</div><div class="line">For details type `warranty&apos;.</div><div class="line">obase=16</div><div class="line">16      &lt;=== entered</div><div class="line">10      &lt;=== response</div><div class="line">256     &lt;=== entered</div><div class="line">100     &lt;=== response</div><div class="line">quit</div></pre></td></tr></table></figure>
<p>按如下方式使用 bc 也是完成十六进制与十进制转换的最简单方式之一：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ echo &quot;ibase=16; F2&quot; | bc</div><div class="line">242</div><div class="line">$ echo &quot;obase=16; 242&quot; | bc</div><div class="line">F2</div></pre></td></tr></table></figure>
<p>在上面第一个例子中，我们将输入进制（ibase）设置为十六进制（hex），完成十六进制到为十进制的转换。在第二个例子中，我们执行相反的操作，即将输出进制（obase）设置为十六进制。</p>
<h2 id="五-简单的-bash-数学运算"><a href="#五-简单的-bash-数学运算" class="headerlink" title="五 简单的 bash 数学运算"></a>五 简单的 bash 数学运算</h2><p>通过使用双括号，我们可以在 bash 中完成简单的数学运算。在下面的例子中，我们创建一个变量，为变量赋值，然后依次执行加法、自减和平方。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ ((e=11))</div><div class="line">$ (( e = e + 7 ))</div><div class="line">$ echo $e</div><div class="line">18</div><div class="line"></div><div class="line">$ ((e--))</div><div class="line">$ echo $e</div><div class="line">17</div><div class="line"></div><div class="line">$ ((e=e**2))</div><div class="line">$ echo $e</div><div class="line">289</div></pre></td></tr></table></figure>
<p>允许使用的运算符包括：</p>
<ul>
<li>+ -     加法及减法</li>
<li>++ --   自增与自减</li>
<li>* / %   乘法、除法及求余数</li>
<li>^       指数运算</li>
</ul>
<p>你还可以使用逻辑运算符和布尔运算符：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ ((x=11)); ((y=7))</div><div class="line">$ if (( x &gt; y )); then</div><div class="line">&gt; echo &quot;x &gt; y&quot;</div><div class="line">&gt; fi</div><div class="line">x &gt; y</div><div class="line"></div><div class="line">$ ((x=11)); ((y=7)); ((z=3))</div><div class="line">$ if (( x &gt; y )) &gt;&gt; (( y &gt; z )); then</div><div class="line">&gt; echo &quot;letters roll downhill&quot;</div><div class="line">&gt; fi</div><div class="line">letters roll downhill</div></pre></td></tr></table></figure>
<p>或者如下方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ if [ x &gt; y ] &lt;&lt; [ y &gt; z ]; then echo &quot;letters roll downhill&quot;; fi</div><div class="line">letters roll downhill</div></pre></td></tr></table></figure>
<p>下面计算 2 的 3 次幂：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ echo &quot;2 ^ 3&quot;</div><div class="line">2 ^ 3</div><div class="line">$ echo &quot;2 ^ 3&quot; | bc</div><div class="line">8</div></pre></td></tr></table></figure>
<p>以上，便是Linux系统下命令行对于数学计算的常用方法。</p>
<p><img src="http://onjm2392k.bkt.clouddn.com/renpingjun/vgrefs548hf347hd23ie9ysh23.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Linux系统中，有很多不同的命令行工具可以完成数字运算，比如说expr、factor、jot 和 bc 命令。&lt;/p&gt;
&lt;h2 id=&quot;一-expr&quot;&gt;&lt;a href=&quot;#一-expr&quot; class=&quot;headerlink&quot; title=&quot;一 expr&quot;&gt;&lt;/a&gt;一 e
    
    </summary>
    
      <category term="Linux" scheme="http://www.renpingjun.top/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://www.renpingjun.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript穷理尽微-字符串操作</title>
    <link href="http://www.renpingjun.top/2018/03/04/ss3654gddh2/"/>
    <id>http://www.renpingjun.top/2018/03/04/ss3654gddh2/</id>
    <published>2018-03-04T01:03:00.000Z</published>
    <updated>2018-06-17T10:40:15.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-模版字符串（template-string）"><a href="#一-模版字符串（template-string）" class="headerlink" title="一 模版字符串（template string）"></a>一 模版字符串（template string）</h2><p>在ES5以前，输出模版通常都是使用+对字符串进行拼接完成的，这种写法非常繁琐。于是ES6引入了模板字符串，模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量,变量名需要写在${}之中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let name = &quot;Renpingjun&quot;, time = &quot;today&quot;;</div><div class="line">let result = `Hello $&#123;name&#125;, how are you $&#123;time&#125;?`</div></pre></td></tr></table></figure>
<h2 id="二-遍历器接口"><a href="#二-遍历器接口" class="headerlink" title="二 遍历器接口"></a>二 遍历器接口</h2><p>ES6为字符串添加了遍历器接口，使得字符串可以被for…of循环遍历。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">for (let codePoint of &apos;pepsi&apos;) &#123;</div><div class="line">  console.log(codePoint)</div><div class="line">&#125;</div><div class="line"></div><div class="line">// &quot;p&quot;</div><div class="line">// &quot;e&quot;</div><div class="line">// &quot;p&quot;</div><div class="line">// &quot;s&quot;</div><div class="line">// &quot;i&quot;</div></pre></td></tr></table></figure>
<h2 id="三-常用方法"><a href="#三-常用方法" class="headerlink" title="三 常用方法"></a>三 常用方法</h2><h3 id="1-indexOf"><a href="#1-indexOf" class="headerlink" title="1 indexOf()"></a>1 indexOf()</h3><p>indexOf()方法可返回某个指定的字符串值在字符串中首次出现的位置,如果要检索的字符串值没有出现，则返回 -1。用法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let str = &quot;pepsi&quot;;</div><div class="line">console.log(str.indexOf(p)); //0</div></pre></td></tr></table></figure>
<h3 id="2-includes-startsWith-endsWith"><a href="#2-includes-startsWith-endsWith" class="headerlink" title="2 includes(), startsWith(), endsWith()"></a>2 includes(), startsWith(), endsWith()</h3><ul>
<li>includes()：返回布尔值，表示是否找到了参数字符串。</li>
<li>startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。</li>
<li>endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let s = &apos;Hello world!&apos;;</div><div class="line"></div><div class="line">s.startsWith(&apos;Hello&apos;) // true</div><div class="line">s.endsWith(&apos;!&apos;) // true</div><div class="line">s.includes(&apos;o&apos;) // true</div></pre></td></tr></table></figure>
<h3 id="3-repeat"><a href="#3-repeat" class="headerlink" title="3 repeat()"></a>3 repeat()</h3><p>repeat()方法返回一个新字符串，表示将原字符串重复n次。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;x&apos;.repeat(3) // &quot;xxx&quot;</div></pre></td></tr></table></figure>
<h3 id="4-padStart-，padEnd"><a href="#4-padStart-，padEnd" class="headerlink" title="4 padStart()，padEnd()"></a>4 padStart()，padEnd()</h3><p>如果某个字符串不够指定长度，会在头部或尾部补全。padStart()用于头部补全，padEnd()用于尾部补全。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&apos;x&apos;.padStart(5, &apos;ab&apos;) // &apos;ababx&apos;</div><div class="line">&apos;x&apos;.padStart(4, &apos;ab&apos;) // &apos;abax&apos;</div><div class="line"></div><div class="line">&apos;x&apos;.padEnd(5, &apos;ab&apos;) // &apos;xabab&apos;</div><div class="line">&apos;x&apos;.padEnd(4, &apos;ab&apos;) // &apos;xaba&apos;</div></pre></td></tr></table></figure></p>
<h2 id="四-字符串和正则表达式"><a href="#四-字符串和正则表达式" class="headerlink" title="四 字符串和正则表达式"></a>四 字符串和正则表达式</h2><p>字符串对象共有4个方法，可以使用正则表达式：match()、replace()、search()和split()。</p>
<h3 id="1-match"><a href="#1-match" class="headerlink" title="1 match()"></a>1 match()</h3><p>match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配,返回的是指定的值。</p>
<h3 id="2-replace"><a href="#2-replace" class="headerlink" title="2 replace()"></a>2 replace()</h3><p>replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</p>
<h3 id="3-search"><a href="#3-search" class="headerlink" title="3 search()"></a>3 search()</h3><p>search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。返回相匹配的字符串起始位置，如果没有找到任何匹配的子串，则返回 -1。</p>
<h3 id="4-split"><a href="#4-split" class="headerlink" title="4 split()"></a>4 split()</h3><p>split() 方法用于把一个字符串分割成字符串数组。</p>
<p><img src="http://onjm2392k.bkt.clouddn.com/renpingjun/vgrefs548hf347hd23ie9ysh23.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-模版字符串（template-string）&quot;&gt;&lt;a href=&quot;#一-模版字符串（template-string）&quot; class=&quot;headerlink&quot; title=&quot;一 模版字符串（template string）&quot;&gt;&lt;/a&gt;一 模版字符串（templa
    
    </summary>
    
      <category term="JavaScript穷理尽微" scheme="http://www.renpingjun.top/categories/JavaScript%E7%A9%B7%E7%90%86%E5%B0%BD%E5%BE%AE/"/>
    
    
      <category term="JavaScript" scheme="http://www.renpingjun.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript穷理尽微-操作符</title>
    <link href="http://www.renpingjun.top/2018/03/03/349a10oj7/"/>
    <id>http://www.renpingjun.top/2018/03/03/349a10oj7/</id>
    <published>2018-03-03T11:03:00.000Z</published>
    <updated>2018-06-17T10:06:10.793Z</updated>
    
    <content type="html"><![CDATA[<p>在JavaScript中，操作符是用来操作数据值的，适用于字符串、数值、布尔值，甚至对象。只不过在应用于对象时，相应的操作符会调用对象的valueOf() 或toString()方法，以便取得可以操作的值。常见的操作符包括算数操作符、关系操作符、相等操作符和位操作符等。</p>
<h2 id="一-一元操作符"><a href="#一-一元操作符" class="headerlink" title="一 一元操作符"></a>一 一元操作符</h2><p>只能操作一个值的操作符叫做一元操作符。一元操作符是ECMAScript中最简单的操作符。</p>
<h3 id="1-递增和递减"><a href="#1-递增和递减" class="headerlink" title="1 递增和递减"></a>1 递增和递减</h3><p>递增和递减有前置和后置两种算法类型，前置型就是位于要操作的变量之前，后置型就是位于要操作的变量之后。代码示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let age = 24;</div><div class="line">++ age; //age = 25</div></pre></td></tr></table></figure></p>
<p>在这个例子中，前置递增操作符把age的值变成了25。实际上这个效果等同于age = age + 1。相似地，前置递减操作会从变量中减去1。</p>
<p>后置递增（减）操作符与前置递增（减）操作符的区别在于递增和递减是在包含它们的语句被求值之后才执行的。示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let count1 = 2;</div><div class="line">let count2 = 20;</div><div class="line">let count3 = count1-- + count2; //22</div><div class="line">let count4 = count1 + count2; //21</div></pre></td></tr></table></figure></p>
<h3 id="2-一元加和减"><a href="#2-一元加和减" class="headerlink" title="2 一元加和减"></a>2 一元加和减</h3><p>一元加操作符放在数值前对数值不会产生任何影响，放在非数值前时则会将该值隐式转换成数值类型。示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">let a = &quot;1.2&quot;,b = true, c = &quot;haha&quot;,</div><div class="line">    d = &#123;</div><div class="line">      valueOf:function()&#123;</div><div class="line">        return -1</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">a = +a; //1.2</div><div class="line">b = +b; //1</div><div class="line">c = +c; //NaN</div><div class="line">d = +d; //-1</div></pre></td></tr></table></figure></p>
<p>一元减操作符主要用于表示负数，如将1转为-1。</p>
<h2 id="二-位操作符"><a href="#二-位操作符" class="headerlink" title="二 位操作符"></a>二 位操作符</h2><p>位操作符用于在最基本的层次上，即按内存中表示数值的位来操作数值。在JavaScript中，所有数值都是按664位格式存储的，但位操作符并不直接操作64位的值，二是先将64位值转成32位，执行操作结束后在换成64位。</p>
<p>对于有符号的整数，32位中的前31位用于表示整数的值，第32位用于表示数值的符号：0表示正数，1表示负数。这个表示符号的位叫做符号位，符号位的值决定了其他位数值的格式。其中正数以纯二进制格式存储，31位中的每一位都表示2的幂，从右向左依次是2<sup>0</sup>, 2<sup>1</sup>, 2<sup>2</sup>……依次类推。</p>
<p>负数同样以二进制码存储，但使用的格式是二进制补码。计算一个数值的二进制补码过程如下：（1）求这个数值绝对值的二进制码；（2）求二进制反码，即将0换成1，将1换成0；（3）得到的二进制反码加1。</p>
<p>需要注意的是，在处理有符号整数时，是不能访问位31的，ECMAScript会隐藏这些信息。也就是说，在以二进制字符串形式输出一个负数时，我们看到的只是这个数值的绝对值的二进制码前面加了个符号。<br>代码示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let num = -18;</div><div class="line">console.log(num.toString(2)); // -10010</div></pre></td></tr></table></figure></p>
<h3 id="1-按位非（NOT）"><a href="#1-按位非（NOT）" class="headerlink" title="1 按位非（NOT）"></a>1 按位非（NOT）</h3><p>按位非操作符由一个波浪线（～）表示，执行按位非的结果就是返回数值的反码。按位非操作的本质是：操作数的负值减1。示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let num = 25;</div><div class="line">let num2 = ~num; //num2 = -26, 相当于num2 = -num1 -1</div></pre></td></tr></table></figure></p>
<h3 id="2-按位与（AND）"><a href="#2-按位与（AND）" class="headerlink" title="2 按位与（AND）"></a>2 按位与（AND）</h3><p>按位与操作符由符号（&amp;）表示，它有两个操作符数。从本质上讲，按位与操作就是将两个数值的每一位对齐，然后根据下表规则对相同位置上的两个数执行AND操作。</p>
<table>
<thead>
<tr>
<th>第一个数值的位</th>
<th>第二个数值的位</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let result = 25 &amp; 3;</div><div class="line">console.log(result); //1</div></pre></td></tr></table></figure></p>
<h3 id="3-按位或（OR）"><a href="#3-按位或（OR）" class="headerlink" title="3 按位或（OR）"></a>3 按位或（OR）</h3><p>按位或操作符由一个竖线（|）表示，和按位与操作符一样，它也有两个操作符数，操作方法也是将两个数值的每一位对齐，然后根据下表规则对相同位置上的两个数执行OR操作。</p>
<table>
<thead>
<tr>
<th>第一个数值的位</th>
<th>第二个数值的位</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let result = 25 | 3;</div><div class="line">console.log(result); //27</div></pre></td></tr></table></figure></p>
<h3 id="4-按位异或（XOR）"><a href="#4-按位异或（XOR）" class="headerlink" title="4 按位异或（XOR）"></a>4 按位异或（XOR）</h3><p>按位异或操作符由一个插入符号（^）表示，也有连个操作符数。以下是按位异或的真值表。</p>
<table>
<thead>
<tr>
<th>第一个数值的位</th>
<th>第二个数值的位</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let result = 25 | 3;</div><div class="line">console.log(result); //26</div></pre></td></tr></table></figure></p>
<p>关于25和3的按位与、按位或、按位异或的底层操作如下图示：<br><img src="http://onjm2392k.bkt.clouddn.com/renpingjun/WechatIMG355.jpeg" alt=""></p>
<h3 id="5-左移"><a href="#5-左移" class="headerlink" title="5 左移"></a>5 左移</h3><p>左移操作符由两个小于号（&lt;&lt;）表示。该操作符会将数值的所有位向左移动指定的位数，左移操作多出来的空位会以0来填充。需要注意的是左移不会影响操作的符号位。代码示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let num = 2;          //等于二进制0000 0000 0000 0000 0000 0000 0000 0010</div><div class="line">let num2 = num &lt;&lt; 5; // 等于二进制0000 0000 0000 0000 0000 0000 0100 0000</div><div class="line">console.log(num2);   // 64</div><div class="line"></div><div class="line">let num3 = -2 &lt;&lt; 5;  // -64</div></pre></td></tr></table></figure>
<h3 id="6-有符号右移"><a href="#6-有符号右移" class="headerlink" title="6 有符号右移"></a>6 有符号右移</h3><p>有符号的右移操作符由两个大于号（&gt;&gt;）表示，该操作符会将数值向右移动，但保留符号位。在移动过程中，原数值也会出现空位，只不过这次出现在原数值的左侧、符号位的右侧。而此时ECMAScript会用符号位的值来填充所有空位，以便得到一个完整的值。示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let num4 = 64;;       // 等于二进制0000 0000 0000 0000 0000 0000 0100 0000</div><div class="line">let num5 = num4 &gt;&gt; 5; // 等于二进制0000 0000 0000 0000 0000 0000 0000 0010</div><div class="line">console.log(num5);    // 2</div></pre></td></tr></table></figure></p>
<h3 id="7-无符号右移"><a href="#7-无符号右移" class="headerlink" title="7 无符号右移"></a>7 无符号右移</h3><p>无符号右移操作符由三个大于号（&gt;&gt;&gt;）表示，这个操作符会将数值的所有32位都向右移动。对正数来说，无符号右移和有符号右移结果相同。对负数来说，首先是无符号右移是以0来来填充右移过程中出现的空位，其次是无符号右移操作会把负数的二进制码当成正数的二进制码。这样导致的结果就是：由于负数以其绝对值的二进制补码形式表示，无符号右移后的结果非常之大。示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let num6 = -64;</div><div class="line">let num7 = num6 &gt;&gt;&gt; 5</div><div class="line">console.log(num7); // 134217726</div></pre></td></tr></table></figure></p>
<h2 id="三-逻辑操作符"><a href="#三-逻辑操作符" class="headerlink" title="三 逻辑操作符"></a>三 逻辑操作符</h2><p>逻辑操作符也叫布尔操作符，一共有三个：非（NOT）、与（AND）、或（OR）。</p>
<h3 id="1-逻辑非"><a href="#1-逻辑非" class="headerlink" title="1 逻辑非"></a>1 逻辑非</h3><p>逻辑非操作符由一个叹号（！）表示，可应用于ECMAScript中任何类型的数据，返回结果都是一个布尔值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">!123; // false</div><div class="line">!false; // true</div></pre></td></tr></table></figure></p>
<h3 id="2-逻辑与"><a href="#2-逻辑与" class="headerlink" title="2 逻辑与"></a>2 逻辑与</h3><p>逻辑与操作符由两个和号（&amp;&amp;）表示，逻辑与的真值表如下：</p>
<table>
<thead>
<tr>
<th>第一个操作数</th>
<th>第二个操作数</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>true</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>false</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
</tbody>
</table>
<p>逻辑与操作可以应用于任何类型数据的操作。它的操作规则如下：（1）：如果第一个操作数是对象，则返回第二个操作数；（2）如果第二个操作数是对象，只有第一个操作数返回结果为true时，才返回该个对象；（3）如果两个操作数都是对象，则返回第二个操作数；（4）如果有一个操作数是null，则返回null；（5）如果有一个操作数是NaN，则返回NaN；（6）如果有一个操作数是undefined，则返回undefined。</p>
<p>逻辑与操作属于短路操作，即如果第一个操作能够决定结果，则不进行第二个操作。</p>
<h3 id="3-逻辑或"><a href="#3-逻辑或" class="headerlink" title="3 逻辑或"></a>3 逻辑或</h3><p>逻辑或操作符由两个竖线符号（||）表示，有两个操作数，其真值表如下所示：</p>
<table>
<thead>
<tr>
<th>第一个操作数</th>
<th>第二个操作数</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>true</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>false</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
</tbody>
</table>
<p>逻辑或的操作规则如下：（1）如果第一个操作数是对象，则返回第一个操作数；（2）如果第一个操作数的返回结果为false，则返回第二个操作数；（3）如果两个操作数都是对象，则返回第一个操作数；（4）如果两个操作数都是null，则返回null；（5）如果两个操作数都是NaN，则返回NaN；（6）如果两个操作数都是undefined，则返回undefined。</p>
<p>和逻辑与操作符相似，逻辑或操作符也是短路操作符。我们可以利用逻辑或的特性来避免为变量赋null或undefined值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let info = preferredInfo || backupInfo</div></pre></td></tr></table></figure></p>
<h2 id="四-乘性操作符"><a href="#四-乘性操作符" class="headerlink" title="四 乘性操作符"></a>四 乘性操作符</h2><p>ECMAScript定义了三个乘性操作符，分别是：乘法、除法和求模（取余）。</p>
<h3 id="1-乘法"><a href="#1-乘法" class="headerlink" title="1 乘法"></a>1 乘法</h3><p>乘法操作符由一个星号（*）表示，用于计算两个数值的乘积。如果乘积超过了ECMAScript数值的表示范围，则返回Infinity或-Infinity。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let result = 2 * 5;// 10</div></pre></td></tr></table></figure></p>
<h3 id="2-除法"><a href="#2-除法" class="headerlink" title="2 除法"></a>2 除法</h3><p>除法操作符由一个斜线符号（/）表示，执行第二个操作数除第一个操作数的计算。同样的，如果商超过了ECMAScript数值的表示范围，则返回Infinity或-Infinity。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let result = 48 / 3;// 16</div></pre></td></tr></table></figure>
<h3 id="3-求模（取余）"><a href="#3-求模（取余）" class="headerlink" title="3 求模（取余）"></a>3 求模（取余）</h3><p>求模操作符由一个百分号（%）表示，执行第二个操作数除第一个操作数并返回余数的计算。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let result = 16 % 3; // 1</div></pre></td></tr></table></figure>
<h2 id="五-加性操作符"><a href="#五-加性操作符" class="headerlink" title="五 加性操作符"></a>五 加性操作符</h2><h3 id="1-加法操作符"><a href="#1-加法操作符" class="headerlink" title="1 加法操作符"></a>1 加法操作符</h3><p>加法操作符（+）用于计算两个数值的和。计算规则如下：（1）如果两个操作数都是数值，则执行常规的计算方法；（2）如果两个操作数有一个是字符串，则转成字符串后连个操作值拼接，如果两个都是字符串则直接拼接；（3）如果有一个操作数是对象、布尔，则调用他们的toString（）方法取得相应的字符串在进行拼接。示例代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let result1 = 2 + 3; // 5</div><div class="line">let result2 = 2 + &quot;3&quot;; // &quot;23&quot;</div></pre></td></tr></table></figure>
<h3 id="2-减法操作符"><a href="#2-减法操作符" class="headerlink" title="2 减法操作符"></a>2 减法操作符</h3><p>减法操作符（-）用于计算两个数值的差。计算规则如下：（1）如果两个操作数都是数值，则执行常规的计算方法；（2）如果有一个操作数是NaN，则返回NaN；（3）Infinity - Infinity = NaN，- Infinity - - Infinity = NaN，Infinity - -Infinity = Infinity， - Infinity - Infinity = Infinity；（4）如果有一个操作数是字符串、布尔、null或undefined，则先调用Number（）方法将其转成数值再进行计算；（5）如果一个操作数是对象，则先调用valueOf（）取得该对象的数值再进行计算，如果没有valueOf（）则调用toString（）并将得到的字符串转成数值再计算。示例代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let result1 = 5 - true; // 4</div><div class="line">let result2 = NaN -2; // NaN</div><div class="line">let result3 = 5 - &quot;&quot;; // 5</div><div class="line">let result4 = 5 - &quot;2&quot;; // 3</div><div class="line">let result5 = 5 - null; // 5</div></pre></td></tr></table></figure>
<h2 id="六-关系操作符"><a href="#六-关系操作符" class="headerlink" title="六 关系操作符"></a>六 关系操作符</h2><p>关系操作符用于两个数值进行比较，包括小于（&lt;）,大于（&gt;）,小于等于（&lt;=）,大于等于（&gt;=），返回结果都是一个布尔值。计算规则如下：（1）如果两个操作数都是数值，则执行数值比较；（2）如果两个操作数都是字符串，则比较两个操作数对应的字符编码值；（3）如果一个操作数是数值，则将另一个操作数转成数值再进行比较；（4）如果一个操作数是布尔，则先将其转成数值再进行比较；（5）如果一个操作数是对象，则先调用valueOf（）取得该对象的数值再进行计算，如果没有valueOf（）则调用toString（）并将得到的字符串转成数值再计算。</p>
<h2 id="七-相等操作符"><a href="#七-相等操作符" class="headerlink" title="七 相等操作符"></a>七 相等操作符</h2><p>判断连个变量是否相等是编程中的一个非常重要的操作。ECMAScript提供了两组操作符：相等和不相等，全等和不全等。相等操作符由两个等号（==）表示，不相等操作符由叹号加等号（！=）表示，这两个操作符都会先转换操作数（通常称为强制转换），然后再进行比较。全等操作符（===）和不全等操作符（！==）则不会转换操作数类型，因此在判断式不仅比较数值是否相等，还比较类型是否一致。在实际项目开发中，为了保持代码的一致性，推荐使用全等操作符和不全等操作符。</p>
<h2 id="八-条件操作符"><a href="#八-条件操作符" class="headerlink" title="八 条件操作符"></a>八 条件操作符</h2><p>条件操作符也叫三目运算符，其基本语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let result = boolean_expression ? true_value : false_value</div></pre></td></tr></table></figure></p>
<h2 id="九-赋值操作符"><a href="#九-赋值操作符" class="headerlink" title="九 赋值操作符"></a>九 赋值操作符</h2><p>赋值操作符由等号（=）表示，其作用是把右侧的值赋给左边的变量。如果在等号左边加上算数操作符或位操作符，就可以完成复合赋值操作（*=, /=, +=, -=等）。</p>
<h2 id="十-逗号操作符"><a href="#十-逗号操作符" class="headerlink" title="十 逗号操作符"></a>十 逗号操作符</h2><p>使用逗号操作符可以在一条语句中执行多个操作。逗号操作符多用于声明多个变量。如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let a = 12, b = &quot;pepsi&quot;, c = true;</div></pre></td></tr></table></figure></p>
<p><img src="http://onjm2392k.bkt.clouddn.com/renpingjun/vgrefs548hf347hd23ie9ysh23.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在JavaScript中，操作符是用来操作数据值的，适用于字符串、数值、布尔值，甚至对象。只不过在应用于对象时，相应的操作符会调用对象的valueOf() 或toString()方法，以便取得可以操作的值。常见的操作符包括算数操作符、关系操作符、相等操作符和位操作符等。&lt;/
    
    </summary>
    
      <category term="JavaScript穷理尽微" scheme="http://www.renpingjun.top/categories/JavaScript%E7%A9%B7%E7%90%86%E5%B0%BD%E5%BE%AE/"/>
    
    
      <category term="JavaScript" scheme="http://www.renpingjun.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript穷理尽微-数据类型</title>
    <link href="http://www.renpingjun.top/2018/03/03/koi328d209j/"/>
    <id>http://www.renpingjun.top/2018/03/03/koi328d209j/</id>
    <published>2018-03-03T01:03:00.000Z</published>
    <updated>2018-06-13T02:23:24.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-数据类型"><a href="#一-数据类型" class="headerlink" title="一 数据类型"></a>一 数据类型</h2><p>ECMAScript有7中数据类型，分别是Undefined、Null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）和Symbol。其中Symbol是ES6为了从根本上防止属性名命名冲突新增加的。</p>
<h3 id="1-Undefined"><a href="#1-Undefined" class="headerlink" title="1 Undefined"></a>1 Undefined</h3><p>Undefined类型只有一个值，即特殊的undefined。在声明了一个变量但未对其进行初始化，这个变量的值就是undefined。</p>
<h3 id="2-Null"><a href="#2-Null" class="headerlink" title="2 Null"></a>2 Null</h3><p>Null类型也只有一个值，即null，null值表示一个空对象指针。</p>
<p>如果定义的变量准备在将来用于保存对象，那么应该在变量初始化时设为null。这样做的好处是只要检查null值就可以知道相应的变量是否已经保存了一个对象的引用。示例代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if(data != null)&#123;</div><div class="line">  doSomething()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-Boolean"><a href="#3-Boolean" class="headerlink" title="3 Boolean"></a>3 Boolean</h3><p>Boolean类型有两个字面值：true和false。<br>Boolean()函数可以将任何数据类型的值转换为Boolean值。至于这个值是true还是false，则取决于要转换值的数据类型和实际值。</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>转换为true</th>
<th>转换为false</th>
</tr>
</thead>
<tbody>
<tr>
<td>Boolean</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>String</td>
<td>非空字符</td>
<td>“”</td>
</tr>
<tr>
<td>Number</td>
<td>非0数字</td>
<td>0和NaM</td>
</tr>
<tr>
<td>Object</td>
<td>任何对象</td>
<td>null</td>
</tr>
</tbody>
</table>
<h3 id="4-String"><a href="#4-String" class="headerlink" title="4 String"></a>4 String</h3><p>String类型即字符串，用于表示由0个或多个16位Unicode字符组成的字符序列，可以用引号表示。</p>
<p>String数据类型包含一些特殊的字符字面量，叫转义符，用于表示非打印字符，或者具有其他用途的字符。</p>
<table>
<thead>
<tr>
<th>字面量</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>\n</td>
<td>换行</td>
</tr>
<tr>
<td>\t</td>
<td>制表</td>
</tr>
<tr>
<td>\b</td>
<td>退格</td>
</tr>
<tr>
<td>\r</td>
<td>回车</td>
</tr>
<tr>
<td>\</td>
<td>斜杠</td>
</tr>
<tr>
<td>\’</td>
<td>引号</td>
</tr>
</tbody>
</table>
<p>字符串转换有两个函数：toString()和String()。由于null和undefined没有toString()方法，在不知道要转换的值是不是null和undefined时，可以使用String()方法，这个函数能够将任何类型的数值转换为字符串。String()方法转换规则如下：</p>
<ul>
<li>如果值有toString()方法，则调用该方法并返回相应的结果；</li>
<li>如果值是null，则返回“null”；</li>
<li>如果值是undefined，则返回“undefined”。</li>
</ul>
<h3 id="5-Number"><a href="#5-Number" class="headerlink" title="5 Number"></a>5 Number</h3><p>Number类型表示数值，通常包含两种数值：整数和浮点数。最基本的数值字面量格式是十进制，也是默认格式。</p>
<p>除此之外还可以通过八进制和十六进制格式的字面量来表示。八进制字面值的第一位必须是0，然后是八进制数字序列（0-7）。如果字面值的数值超出了范围，那么前面的0将被忽略，后面的数值将被当作十进制进行解析。十六进制字面值的前两位必须是0x，后面跟任何十六进制数值（0-9，A-F），字母不区分大小写。注意：在进行算数计算时，不管是八进制还是十六进制都将被转换成十进制数值。</p>
<p>需要特殊说明的是NaN，NaN是一个特殊的数值，这个数值表示一个本来要返回数值的操作数未返回数值的情况。NaN有两个特点：一是任何设计NaN的操作都会返回NaN，二是NaN与任何值都不相等，包括自身。针对这两个特点，ECMAScript定义了isNaN（）函数，用于判断所传值是否不是数值。</p>
<p>关于数值转换有三个函数：Number(), parseInt(), parseFloat()。</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>Number()</th>
</tr>
</thead>
<tbody>
<tr>
<td>Number</td>
<td>返回十进制的数值</td>
</tr>
<tr>
<td>Boolean</td>
<td>true转成1，false转成0</td>
</tr>
<tr>
<td>null</td>
<td>返回0</td>
</tr>
<tr>
<td>undefined</td>
<td>返回NaN</td>
</tr>
<tr>
<td>String</td>
<td>如果字符串为空则返回0；如果字符串只包含数字，则转成十进制数值；如果字符串包含有效的浮点格式，则转成对应的浮点数值；如果字符串中包含十六进制数值，则转成对应的十进制数值；其他情况返回NaN</td>
</tr>
<tr>
<td>Object</td>
<td>先调用valueOf()方法，然后依照上面规则转换；如果转换结果是NaN，则调用对象的toString()方法，然后再依照上面规则转换返回的字符串值</td>
</tr>
</tbody>
</table>
<p>parseInt() 函数可解析一个字符串，并返回一个整数。parseInt() 函数在转换字符串时，如果第一个字符不是数字或负号，则会返回NaN，空字符串也会返回NaN；</p>
<p>parseFloat() 函数可解析一个字符串，并返回一个浮点数。对parseFloat() 函数来说，只有字符串的第一个小数点有效第二个小数点后面的将被忽略。</p>
<h3 id="6-Object"><a href="#6-Object" class="headerlink" title="6 Object"></a>6 Object</h3><p>ECMAScript中的对象其实就是一组数据和方法的集合。对象可以通过new关键字+要创建的对象类型的名称来创建，如 var o = new Object(),实际开发中我们通常直接通过字面量来定义一个对象，如 var o = {}。</p>
<h3 id="7-Symbol"><a href="#7-Symbol" class="headerlink" title="7 Symbol"></a>7 Symbol</h3><p>Symbol值通过Symbol函数生成。凡是属性名属于Symbol类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let s = Symbol();</div><div class="line"></div><div class="line">typeof s</div><div class="line">// &quot;symbol&quot;</div></pre></td></tr></table></figure></p>
<p>关于Symbol类型的值，有两点需要注意：一是相同参数的Symbol函数的返回值是不相等的；二是Symbol值不能与其他类型的值进行运算。</p>
<h2 id="二-数据类型判断"><a href="#二-数据类型判断" class="headerlink" title="二 数据类型判断"></a>二 数据类型判断</h2><h3 id="1-typeof"><a href="#1-typeof" class="headerlink" title="1 typeof"></a>1 typeof</h3><p>typeof是最常见的数据类型判断方法，可以根据不同的值返回7个结果，返回的类型都是字符串形式。示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var a,b = &#123;&#125;,c = function()&#123;&#125;,d = Symbol();</div><div class="line">typeof a;// &quot;undefined&quot;</div><div class="line">typeof 2;// &quot;number&quot;</div><div class="line">typeof &quot;renpingjun&quot;;// &quot;string&quot;</div><div class="line">typeof true;// &quot;boolean&quot;</div><div class="line">typeof b;// &quot;object&quot;</div><div class="line">typeof c;// &quot;function&quot;</div><div class="line">typeof d;//&quot;symbol&quot;</div></pre></td></tr></table></figure>
<p>使用typeof判断非常简单，到也会有一些问题，比如typeof null返回结果是object，而且在数组、正则、日期、对象上的判断都是返回object。由此可以引出另一个判断方法Object.prototype.toString()。</p>
<p>ECMAScript的特殊对象类型：Array、Function、Math、Date、JSON、RegExp、Error，每种类型都各自代表一种独立的类，不同的类实例拥有不同的类特性以及对应的操作方式。</p>
<h3 id="2-Object-prototype-toString"><a href="#2-Object-prototype-toString" class="headerlink" title="2 Object.prototype.toString"></a>2 Object.prototype.toString</h3><p>toString()方法返回一个描述某对象的字符串，如果此方法在自定义的对象中未被覆盖，则toString()返回”[object type]”,其中type是对象类型。<br>在使用toString()方法检测对象类型时，常用Object.prototype.toString.call()来检测。示例：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Object.prototype.toString.call(new Date());// [object Date]</div><div class="line">Object.prototype.toString.call(new String());// [object String]</div><div class="line">Object.prototype.toString.call(new Array());// [object Array]</div><div class="line">Object.prototype.toString.call(Symbol());// [object Symbol]</div><div class="line">Object.prototype.toString.call(Math);// [object Math]</div><div class="line">Object.prototype.toString.call(undefined);// [object Undefined]</div><div class="line">Object.prototype.toString.call(null);// [object Null]</div></pre></td></tr></table></figure>
<h3 id="3-constructor"><a href="#3-constructor" class="headerlink" title="3 constructor"></a>3 constructor</h3><p>constructor 属性返回所有 JavaScript 变量的构造函数。因此我们可以使用 constructor 属性来查看对象是否为某类型，示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function isArray(myArray) &#123;</div><div class="line">    return myArray.constructor.toString().indexOf(&quot;Array&quot;) &gt; -1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="三-数据类型转换"><a href="#三-数据类型转换" class="headerlink" title="三 数据类型转换"></a>三 数据类型转换</h2><p>在JavaScript中，数据类型转换方法有三种：分为转换函数、显式转换和隐式转换。转换函数包含上文提到的toString()、parseInt()、parseFloat()等方法。显式转换包括上文中提到的Boolean()、String()、Number()等方法。接下来主要谈谈隐式转换。</p>
<h3 id="1-Number"><a href="#1-Number" class="headerlink" title="1 Number"></a>1 Number</h3><p>加减乘除以及取余等操作符都可以让字符串隐式转换成number。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = &quot;234&quot;;</div><div class="line">a = +a;</div><div class="line">typeof a;// &quot;number&quot;</div></pre></td></tr></table></figure>
<h3 id="2-String"><a href="#2-String" class="headerlink" title="2 String"></a>2 String</h3><p>使用连接符 +“”可以其他的类型转换成string类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var num = 123;</div><div class="line">var str = num + &quot;&quot;;</div><div class="line">console.log(str, typeof str);//&quot;123&quot;,string</div></pre></td></tr></table></figure></p>
<h3 id="3-Boolean-1"><a href="#3-Boolean-1" class="headerlink" title="3 Boolean"></a>3 Boolean</h3><p>使用取反运算符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var num = undefined;</div><div class="line">var res = !!num;</div><div class="line">console.log(res); //false</div><div class="line">console.log(typeof res);boolean</div></pre></td></tr></table></figure></p>
<p><img src="http://onjm2392k.bkt.clouddn.com/renpingjun/vgrefs548hf347hd23ie9ysh23.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-数据类型&quot;&gt;&lt;a href=&quot;#一-数据类型&quot; class=&quot;headerlink&quot; title=&quot;一 数据类型&quot;&gt;&lt;/a&gt;一 数据类型&lt;/h2&gt;&lt;p&gt;ECMAScript有7中数据类型，分别是Undefined、Null、布尔值（Boolean）、字符串（S
    
    </summary>
    
      <category term="JavaScript穷理尽微" scheme="http://www.renpingjun.top/categories/JavaScript%E7%A9%B7%E7%90%86%E5%B0%BD%E5%BE%AE/"/>
    
    
      <category term="JavaScript" scheme="http://www.renpingjun.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript穷理尽微-解构赋值</title>
    <link href="http://www.renpingjun.top/2018/03/02/nw23jd23uejd9/"/>
    <id>http://www.renpingjun.top/2018/03/02/nw23jd23uejd9/</id>
    <published>2018-03-02T07:03:00.000Z</published>
    <updated>2018-06-09T12:33:17.032Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-什么是解构赋值"><a href="#一-什么是解构赋值" class="headerlink" title="一 什么是解构赋值"></a>一 什么是解构赋值</h2><p>解构，deconstruction，原意为分解，拆解等。解构赋值本质上是一种匹配模式,只要等号两边的模式相同,那么就可以将值从数组或属性从对象拆解开来提取到不同的变量中。如果解构不成功，变量的值就等于undefined。</p>
<h2 id="二-解构赋值举例"><a href="#二-解构赋值举例" class="headerlink" title="二 解构赋值举例"></a>二 解构赋值举例</h2><h3 id="1-数组"><a href="#1-数组" class="headerlink" title="1 数组"></a>1 数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let [a, b, c] = [1, 2, 3];</div></pre></td></tr></table></figure>
<p>示例代码表明，可以从数组中提取值，按照对应位置对变量进行赋值。</p>
<h3 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2 字符串"></a>2 字符串</h3><p>字符串也可以进行解构赋值，是因为字符串有长度，而且可以被转换成了一个类似数组的对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let [a, b, c, d, e] = &apos;hello&apos;;</div></pre></td></tr></table></figure></p>
<h3 id="3-对象"><a href="#3-对象" class="headerlink" title="3 对象"></a>3 对象</h3><p>对象的解构与数组解构的不同之处在于：数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let &#123; bar, foo &#125; = &#123; foo: &quot;aaa&quot;, bar: &quot;bbb&quot; &#125;;</div><div class="line"></div><div class="line">let &#123; foo: baz &#125; = &#123; foo: &apos;aaa&apos;, bar: &apos;bbb&apos; &#125;;</div></pre></td></tr></table></figure></p>
<h3 id="4-数值和布尔值"><a href="#4-数值和布尔值" class="headerlink" title="4 数值和布尔值"></a>4 数值和布尔值</h3><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let &#123;toString: s&#125; = 123;</div><div class="line">s === Number.prototype.toString // true</div><div class="line"></div><div class="line">let &#123;toString: s&#125; = true;</div><div class="line">s === Boolean.prototype.toString // true</div></pre></td></tr></table></figure></p>
<h3 id="5-函数"><a href="#5-函数" class="headerlink" title="5 函数"></a>5 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[1, 2], [3, 4]].map(([a, b]) =&gt; a + b); //[3,7]</div></pre></td></tr></table></figure>
<h2 id="三-应用场景"><a href="#三-应用场景" class="headerlink" title="三 应用场景"></a>三 应用场景</h2><p>变量的解构赋值应用场景很多。</p>
<h3 id="1-交换变量的值"><a href="#1-交换变量的值" class="headerlink" title="1 交换变量的值"></a>1 交换变量的值</h3><p>例如需要把 a = 3,b = 4 变成 a = 4, b = 3。<br>最常规的方法就是引入第三方变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let a = 3,b = 4;</div><div class="line">let temp = a;</div><div class="line">a = b;</div><div class="line">b = temp;</div><div class="line">console.log(a, b);</div></pre></td></tr></table></figure></p>
<p>这样虽然能实现，但引入了一个多余的变量。于是第二种方法出现了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let a = 3,b = 4;</div><div class="line">a += b;</div><div class="line">b = a - b;</div><div class="line">a -= b;</div><div class="line">console.log(a, b);</div></pre></td></tr></table></figure></p>
<p>在不引入第三方变量的情况下实现了需求，但细心的同学就会发现这也是有问题的，即整型数据溢出，比如说对于32位字符最大表示有符号数字是2147483647，也就是Math.pow(2,31)-1，如果是2147483645和2147483646交换就失败了。<br>为了解决这个bug，我们可以利用一个数异或本身等于０和异或运算符合交换率。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let a = 3,b = 4;</div><div class="line">  a ^= b;</div><div class="line">  b ^= a;</div><div class="line">  a ^= b;</div><div class="line">console.log(a, b);</div></pre></td></tr></table></figure></p>
<p>需要说明的是：^ 即”异或“运算符，^ 运算符的特点是与0异或，保持原值；与本身异或，结果为0。</p>
<p>ES6的解构赋值就厉害了，直接交换变量a和b的值，这样的写法不仅简洁，而且易读，语义非常清晰。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let a = 3,b = 4;</div><div class="line">[a,b] = [b,a];</div></pre></td></tr></table></figure>
<h3 id="2-从函数返回多个值"><a href="#2-从函数返回多个值" class="headerlink" title="2 从函数返回多个值"></a>2 从函数返回多个值</h3><p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。 我们可以利用解构赋值从函数返回多个值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function foo() &#123;</div><div class="line">  return [1, 2, 3];</div><div class="line">&#125;</div><div class="line">let [a, b, c] = foo();</div></pre></td></tr></table></figure></p>
<h3 id="3-函数参数的定义"><a href="#3-函数参数的定义" class="headerlink" title="3 函数参数的定义"></a>3 函数参数的定义</h3><p>解构赋值可以方便地将一组参数与变量名对应起来。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 参数是一组有次序的值</div><div class="line">function f([x, y, z]) &#123; ... &#125;</div><div class="line">f([1, 2, 3]);</div><div class="line"></div><div class="line">// 参数是一组无次序的值</div><div class="line">function f(&#123;x, y, z&#125;) &#123; ... &#125;</div><div class="line">f(&#123;z: 3, y: 2, x: 1&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="4-提取JSON数据"><a href="#4-提取JSON数据" class="headerlink" title="4 提取JSON数据"></a>4 提取JSON数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">let jsonData = &#123;</div><div class="line">  id: 42,</div><div class="line">  status: &quot;OK&quot;,</div><div class="line">  data: [867, 5309]</div><div class="line">&#125;;</div><div class="line"></div><div class="line">let &#123; id, status, data: number &#125; = jsonData;</div><div class="line"></div><div class="line">console.log(id, status, number);</div></pre></td></tr></table></figure>
<h3 id="5-函数参数的默认值"><a href="#5-函数参数的默认值" class="headerlink" title="5 函数参数的默认值"></a>5 函数参数的默认值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">const compare = (property, method = &quot;ASC&quot;) =&gt; &#123;</div><div class="line">  return (obj1, obj2) =&gt; &#123;</div><div class="line">    let v1 = obj1[property],v2 = obj2[property];</div><div class="line">    if(method == &quot;DESC&quot;)</div><div class="line">        return v2 - v1</div><div class="line">     else</div><div class="line">        return v1 - v2</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>示例代码中，在参数中给method设置了默认值，就避免了在函数体内部再写let method  = method == “ASC”:”DESC”这样的语句。</p>
<h3 id="6-遍历Map结构"><a href="#6-遍历Map结构" class="headerlink" title="6 遍历Map结构"></a>6 遍历Map结构</h3><p>Map结构原生支持Iterator接口，配合变量的解构赋值，获取键名和键值就非常方便。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var map = new Map();</div><div class="line">map.set(&apos;first&apos;, &apos;hello&apos;);</div><div class="line">map.set(&apos;second&apos;, &apos;world&apos;);</div><div class="line"></div><div class="line">for (let [key, value] of map) &#123;</div><div class="line">  console.log(key + &quot; is &quot; + value);</div><div class="line">&#125;</div><div class="line">// first is hello</div><div class="line">// second is world</div></pre></td></tr></table></figure></p>
<h3 id="7-输入模块的指定方法"><a href="#7-输入模块的指定方法" class="headerlink" title="7 输入模块的指定方法"></a>7 输入模块的指定方法</h3><p>加载模块时，往往需要指定输入那些方法。解构赋值使得输入语句非常清晰。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const &#123; forEach, map, filter, flatten &#125; = require(&quot;arrayUtils&quot;);</div></pre></td></tr></table></figure></p>
<p><img src="http://onjm2392k.bkt.clouddn.com/renpingjun/vgrefs548hf347hd23ie9ysh23.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-什么是解构赋值&quot;&gt;&lt;a href=&quot;#一-什么是解构赋值&quot; class=&quot;headerlink&quot; title=&quot;一 什么是解构赋值&quot;&gt;&lt;/a&gt;一 什么是解构赋值&lt;/h2&gt;&lt;p&gt;解构，deconstruction，原意为分解，拆解等。解构赋值本质上是一种匹配模式
    
    </summary>
    
      <category term="JavaScript穷理尽微" scheme="http://www.renpingjun.top/categories/JavaScript%E7%A9%B7%E7%90%86%E5%B0%BD%E5%BE%AE/"/>
    
    
      <category term="JavaScript" scheme="http://www.renpingjun.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript穷理尽微-从变量的声明谈起</title>
    <link href="http://www.renpingjun.top/2018/03/02/d2dj83yewq3/"/>
    <id>http://www.renpingjun.top/2018/03/02/d2dj83yewq3/</id>
    <published>2018-03-02T05:03:00.000Z</published>
    <updated>2018-06-12T08:25:01.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-var关键字"><a href="#一-var关键字" class="headerlink" title="一 var关键字"></a>一 var关键字</h2><p>在ES5时代，我们都用var关键字来声明一个变量。语法是var操作符+变量名，例如 var message = “hello world”。但有过JavaScript编程经验的都会发现：实际上使用var是有问题的。</p>
<h3 id="问题一：变量提升"><a href="#问题一：变量提升" class="headerlink" title="问题一：变量提升"></a>问题一：变量提升</h3><p>var命令会发生”变量提升“现象，即变量可以在声明之前使用，值为undefined。代码示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var name = &quot;renpingjun&quot;;</div><div class="line">var f = function()&#123;</div><div class="line">  console.log(name);</div><div class="line">  if (false)&#123;</div><div class="line">    var name = &quot;rpj&quot;;</div><div class="line">    console.log(name);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">f();// undefined</div></pre></td></tr></table></figure>
<p>因为变量可以重复声明，而且ES5没有块级作用域，使得内部变量可可以覆盖外部变量。上面函数f执行后，输出结果为undefined，原因在于变量提升，导致内层的tmp变量覆盖了外层的tmp变量。</p>
<h3 id="问题二：变量可以重复声明"><a href="#问题二：变量可以重复声明" class="headerlink" title="问题二：变量可以重复声明"></a>问题二：变量可以重复声明</h3><p>在上一个问题里，我们提到了变量可以反复声明。理论上，在同一个作用域变量是不可以重复声明的。但在ES5中使用var语句多次声明一个变量不仅是合法的,而且也不会造成任何错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var foo = function()&#123;</div><div class="line">  var name = &quot;renpingjun&quot;;</div><div class="line">  var name = &quot;rpj&quot;;</div><div class="line">  console.log(name);</div><div class="line">&#125;</div><div class="line">foo();// rpj</div></pre></td></tr></table></figure></p>
<h3 id="问题三：变量是全局的"><a href="#问题三：变量是全局的" class="headerlink" title="问题三：变量是全局的"></a>问题三：变量是全局的</h3><p>ES5是没有块级作用域一说的，它只有全局作用域和函数作用域，关于函数作用域我会在以后章节细说，这里只说全局作用域。说到全局作用域需要提一下顶层对象，顶层对象在浏览器环境指的是window对象，在Node指的是global对象。我们使用var关键字声明的变量都是全局的，而在ES5之中，顶层对象的属性与全局变量是等价的。代码示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">window.title = &quot;blog&quot;;</div><div class="line">console.log(title) // blog;</div><div class="line"></div><div class="line">var title = &quot;blog&quot;;</div><div class="line">console.log(window.title) // blog;</div></pre></td></tr></table></figure></p>
<p>将顶层对象的属性与全局变量视为等同是不合理的，一是因为顶层对象的属性是随处可以读写的，这非常不利于模块化编程；二是window对象有实体含义，指的是浏览器的窗口对象，与全局变量有明显的差异。</p>
<p>另外一个比较恰当的例子就是在for循环中，用来计数的循环变量会泄露为全局变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var str = &quot;renpingjun&quot;;</div><div class="line">for(var i = 0; i &lt; str.length; i++)&#123;</div><div class="line">  console.log(str[i]);</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(i);// 5</div></pre></td></tr></table></figure>
<p>在示例代码中，变量i只用来控制循环，但是循环结束后它并没有消失，反而泄露成了全局变量。</p>
<h2 id="二-let和const关键字"><a href="#二-let和const关键字" class="headerlink" title="二 let和const关键字"></a>二 let和const关键字</h2><p>为了解决ES5中var关键字声明变量的问题，ES6提出了let关键字。let的主要作用是为 JavaScript 新增了块级作用域。<br>let的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。代码示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (let i = 0; i &lt; 10; i++) &#123;&#125;</div><div class="line">console.log(i);</div><div class="line">//ReferenceError: i is not defined</div></pre></td></tr></table></figure></p>
<p>示例代码中，计数器i只在for循环体内有效，在循环体外引用就会报错。</p>
<p>为了改变ES5中变量提升这一语法现象，let关键字改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">console.log(name); // 报错ReferenceError</div><div class="line">let name = &quot;renpingjun&quot;;</div></pre></td></tr></table></figure></p>
<p>let不允许在相同作用域内，重复声明同一个变量，否则报错，因此也不能在函数内部重新声明参数。示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function foo()&#123;</div><div class="line">  let a = 1;</div><div class="line">  let a = 2;</div><div class="line">  console.log(a);</div><div class="line">&#125;</div><div class="line">foo();// Uncaught SyntaxError: Identifier &apos;a&apos; has already been declared</div><div class="line"></div><div class="line">function func(arg) &#123;</div><div class="line">  let arg; // Uncaught SyntaxError: Identifier &apos;arg&apos; has already been declared</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>相比较ES5的var关键字，let关键字具有三个明显的特征：</p>
<p><strong>1 let声明的变量只在它所在的代码块有效；</strong><br><strong>2 let关键字改变了变量提升的的语法现象；</strong><br><strong>3 在同一作用域，不允许重复声明变量。</strong></p>
<p>在实际编程中，我们不仅需要变量，还需要常量。所谓常量，就是一经声明便不可修改的量。于是ES6增加了const关键字，常量一旦声明，值就不能改变，强行修改就会报错。这也就意味着，声明后就必须立即初始化，不能留到以后赋值。代码示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const name = &quot;renpingjun&quot;;</div><div class="line">name = &apos;rpj&apos;; // Uncaught TypeError: Assignment to constant variable.</div><div class="line"></div><div class="line">const vm;</div><div class="line">vm = &quot;2.56&quot;; // Uncaught SyntaxError: Missing initializer in const declaration.</div></pre></td></tr></table></figure></p>
<p><img src="http://onjm2392k.bkt.clouddn.com/renpingjun/vgrefs548hf347hd23ie9ysh23.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-var关键字&quot;&gt;&lt;a href=&quot;#一-var关键字&quot; class=&quot;headerlink&quot; title=&quot;一 var关键字&quot;&gt;&lt;/a&gt;一 var关键字&lt;/h2&gt;&lt;p&gt;在ES5时代，我们都用var关键字来声明一个变量。语法是var操作符+变量名，例如 var 
    
    </summary>
    
      <category term="JavaScript穷理尽微" scheme="http://www.renpingjun.top/categories/JavaScript%E7%A9%B7%E7%90%86%E5%B0%BD%E5%BE%AE/"/>
    
    
      <category term="JavaScript" scheme="http://www.renpingjun.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript穷理尽微-导读</title>
    <link href="http://www.renpingjun.top/2018/03/02/ss34738dh/"/>
    <id>http://www.renpingjun.top/2018/03/02/ss34738dh/</id>
    <published>2018-03-02T02:03:00.000Z</published>
    <updated>2018-06-17T11:18:54.670Z</updated>
    
    <content type="html"><![CDATA[<p>屈指一数，吾从事web前端开发迄今已有四载矣。心间颇多感慨，竟不知从何说起，可叹逝者如斯夫。</p>
<p>期间，辗转几家公司，行业各有所属：教育、电商、保险等等不一而足，然立足开发，确是编程语言始相类矣，岂独前端之JavaScript哉。</p>
<p>JavaScript自诞生以来便备受瞩目，不断发展，尤近两年，核心版本已逾其六，其语言本身、应用场景、框架模式皆已今非昔比，非当日JavaScript可比肩矣。</p>
<p>吾亦从当年切图仔趋至开发工程师之流，实乃顺时势为之，不见有语言理论体系化之作，心甚愧之。况闻近日项目无新添之事仅维护耳，趁此忙中闲暇，欲重新系统学习JavaScript，名之曰JavaScript穷理尽微。</p>
<p>这是JavaScript穷理尽微系列的第一篇，是为导读。</p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><div style="background:#f3fffe;padding:10px 20px;font-size:18px;"><a href="/2018/03/02/d2dj83yewq3/">一. 从变量的声明谈起</a><br><a href="/2018/03/03/koi328d209j/">二. 数据类型</a><br><a href="/2018/03/02/nw23jd23uejd9/">三. 解构赋值</a><br><a href="/2018/03/03/349a10oj7/">四. 操作符</a><br><a href="/2018/03/04/ss3654gddh2/">五. 字符串操作</a><br>……<br></div>


<p><img src="http://onjm2392k.bkt.clouddn.com/renpingjun/WechatIMG277.jpeg" alt=""></p>
<p><strong>穷理尽微：一词出自《文选·答魏太子笺》：“发言抗论，穷理尽微”，意思是系统深入地研究事物的原理，以达到精深奥妙的境地。</strong></p>
<p><strong>学习书目：《JavaScript高级程序设计》、《精通JavaScript开发》、《ES6标准入门》、《JavaScript设计模式》</strong></p>
<p>二零一八年三月二日  于北京泰康三楼</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;屈指一数，吾从事web前端开发迄今已有四载矣。心间颇多感慨，竟不知从何说起，可叹逝者如斯夫。&lt;/p&gt;
&lt;p&gt;期间，辗转几家公司，行业各有所属：教育、电商、保险等等不一而足，然立足开发，确是编程语言始相类矣，岂独前端之JavaScript哉。&lt;/p&gt;
&lt;p&gt;JavaScrip
    
    </summary>
    
      <category term="JavaScript穷理尽微" scheme="http://www.renpingjun.top/categories/JavaScript%E7%A9%B7%E7%90%86%E5%B0%BD%E5%BE%AE/"/>
    
    
      <category term="JavaScript" scheme="http://www.renpingjun.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>http协议面试常见问题</title>
    <link href="http://www.renpingjun.top/2018/01/20/hd4q76ta/"/>
    <id>http://www.renpingjun.top/2018/01/20/hd4q76ta/</id>
    <published>2018-01-20T08:34:40.000Z</published>
    <updated>2018-05-26T06:46:37.095Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP协议是互联网的基础协议，也是网页开发的必备知识。本文整理了前端面试中涉及到HTTP协议的相关问题。</p>
<h2 id="一-URL详解"><a href="#一-URL详解" class="headerlink" title="一 URL详解"></a>一 URL详解</h2><p>通常一个完整的URL如下示例：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">schema://host[:port#]/path/.../[?query-string][#anchor]</div></pre></td></tr></table></figure></p>
<ul>
<li>scheme 指定低层使用的协议(例如：http, https, ftp)</li>
<li>host HTTP服务器的IP地址或者域名</li>
<li>port# HTTP服务器的默认端口是80，这种情况下端口号可以省略。如果使用了别的端口，必须指明，例如 <a href="http://www.renpingjun.cn:9091/" target="_blank" rel="external">http://www.renpingjun.cn:9091/</a></li>
<li>path 访问资源的路径</li>
<li>query-string 发送给http服务器的数据</li>
<li>anchor- 锚</li>
</ul>
<h2 id="二-Get和Post方法的区别"><a href="#二-Get和Post方法的区别" class="headerlink" title="二 Get和Post方法的区别"></a>二 Get和Post方法的区别</h2><ul>
<li>get重点在从服务器上获取资源，post重点在向服务器发送数据；</li>
<li>get传输数据是通过URL请求，以field（字段）= value的形式，置于URL后，并用”?”连接，多个请求数据间用”&amp;”连接，这个过程用户是可见的，post传输数据通过Http的post机制，将字段与对应值封存在请求实体中发送给服务器，这个过程对用户是不可见的；</li>
<li>受URL长度限制，get传输的数据量小但效率较高，因为URL是可见的，可能会泄露私密信息；post可以传输大量数据，所以上传文件时只能用post方式，较get安全性较高；</li>
<li>get方式只能支持ASCII字符，向服务器传的中文字符可能会乱码,post支持标准字符集，可以正确传递中文字符.</li>
</ul>
<h2 id="三-常用的HTTP请求方法有哪些？"><a href="#三-常用的HTTP请求方法有哪些？" class="headerlink" title="三 常用的HTTP请求方法有哪些？"></a>三 常用的HTTP请求方法有哪些？</h2><ul>
<li>GET： 用于请求访问已经被URI（统一资源标识符）识别的资源，可以通过URL传参给服务器。</li>
<li>POST：用于传输信息给服务器，主要功能与GET方法类似，但一般推荐使用POST方式。</li>
<li>PUT： 传输文件，报文主体中包含文件内容，保存到对应URI位置。</li>
<li>HEAD： 获得报文首部，与GET方法类似，只是不返回报文主体，一般用于验证URI是否有效。</li>
<li>DELETE：删除文件，与PUT方法相反，删除对应URI位置的文件。</li>
<li>OPTIONS：查询相应URI支持的HTTP方法。</li>
</ul>
<h2 id="四-常见状态码及其含义"><a href="#四-常见状态码及其含义" class="headerlink" title="四 常见状态码及其含义"></a>四 常见状态码及其含义</h2><ul>
<li>1xx：指示信息–表示请求已接收，继续处理</li>
<li>2xx：成功–表示请求已被成功接收、理解、接受</li>
<li>3xx：重定向–要完成请求必须进行更进一步的操作</li>
<li>4xx：客户端错误–请求有语法错误或请求无法实现</li>
<li><p>5xx：服务器端错误–服务器未能实现合法的请求</p>
</li>
<li><p>200：请求被正常处理</p>
</li>
<li>204：请求被受理但没有资源可以返回</li>
<li>301：永久性重定向</li>
<li>302：临时重定向</li>
<li>304：发送附带条件的请求时，条件不满足时返回，与重定向无关</li>
<li>400：请求报文语法有误，服务器无法识别</li>
<li>401：请求需要认证</li>
<li>403：请求的对应资源禁止被访问</li>
<li>404：服务器无法找到对应资源</li>
<li>500：服务器内部错误</li>
<li>503：服务器正忙</li>
</ul>
<h2 id="五-描述http从请求到响应的过程"><a href="#五-描述http从请求到响应的过程" class="headerlink" title="五 描述http从请求到响应的过程"></a>五 描述http从请求到响应的过程</h2><p>1 域名解析；<br>2 发起tcp的3次握手；<br>3 建立tcp连接后发起http请求；<br>4 服务器端响应http请求，返回给客户端html代码；<br>5 浏览器解析html代码，并请求所需资源；<br>6 浏览器渲染页面呈现给用户。</p>
<p><img src="http://onjm2392k.bkt.clouddn.com/renpingjun/vgrefs548hf347hd23ie9ysh23.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTTP协议是互联网的基础协议，也是网页开发的必备知识。本文整理了前端面试中涉及到HTTP协议的相关问题。&lt;/p&gt;
&lt;h2 id=&quot;一-URL详解&quot;&gt;&lt;a href=&quot;#一-URL详解&quot; class=&quot;headerlink&quot; title=&quot;一 URL详解&quot;&gt;&lt;/a&gt;一 UR
    
    </summary>
    
      <category term="面试" scheme="http://www.renpingjun.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="http" scheme="http://www.renpingjun.top/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>http协议：从看懂浏览器http报文开始</title>
    <link href="http://www.renpingjun.top/2018/01/18/hd4q76ta/"/>
    <id>http://www.renpingjun.top/2018/01/18/hd4q76ta/</id>
    <published>2018-01-18T08:34:40.000Z</published>
    <updated>2018-05-26T06:45:16.635Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP协议是WWW服务器和用户请求代理（浏览器）之间通过应答请求模式传输超文本内容（html、css、js、图片、接口数据等）的一种协议。</p>
<p>HTTP协议经过了从1.0到2.0的发展，HTTP2相比较与HTTP1有以下几个明显的优点：</p>
<ul>
<li><p>采用二进制格式传输数据</p>
</li>
<li><p>使用TCP多路复用的方式来降低网络请求开销</p>
</li>
<li><p>支持传输流的优先级和流量控制机制</p>
</li>
<li><p>支持服务器端推送</p>
</li>
</ul>
<p>通常一个完整的HTTP报文由头部、空行、正文三部分组成。HTTP报文的头部域信息内容有很多，如下图所示：<br><img src="http://onjm2392k.bkt.clouddn.com/renpingjun/http1001.png" alt="HTTP报文信息示例"></p>
<p>以谷歌浏览器为例，通过开发者工具可以看到，一个完整的HTTP请求包含General（基本信息）,Request Headers（请求头）,Query String Parameters（请求参数）,Response Headers（响应头）,Response Body（响应体）五部分，每个字段都有自己的逻辑和判断机制，现在我们对一些常见的字段设置作详细解释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">Request URL:请求路径，通常包含协议、域名、端口号、访问资源路径和请求参数</div><div class="line">·</div><div class="line">Request Method:请求方法，比如Get、Post、Put等</div><div class="line">·</div><div class="line">Status Code:请求返回的状态码，比如304、200等</div><div class="line">·</div><div class="line">Remote Address:请求远端地址</div><div class="line">·</div><div class="line">Referrer Policy:主要用作分析用户来源，新的Referrer Policy规定了五种 Referrer 策略：No Referrer、No Referrer When Downgrade、Origin Only、Origin When Cross-origin、和 Unsafe URL</div><div class="line">-------------------------------</div><div class="line">User-agent:客户端（浏览器）信息</div><div class="line">·</div><div class="line">Cookie:站点cookie信息，可在客户端和服务端之间来回传递</div><div class="line">·</div><div class="line">Accept:浏览器接收媒体资源类型，*/*表示所有类型；一般有text/plain,text/html,application/json等等</div><div class="line">·</div><div class="line">Accept-Charset:浏览器接收内容字符集，一般是utf-8</div><div class="line">·</div><div class="line">Accept-Encoding:浏览器接收内容的编码方法，如指定是否支持压缩、压缩的方法，一般有gzip,deflate,sdch</div><div class="line">·</div><div class="line">Accept-language:浏览器接收内容的语言，一般有zh-CN,en等</div><div class="line">·</div><div class="line">Allow:设置服务端支持接收哪些HTTP请求方法，如get,post,put等，如果不支持则返回405(Method Not Allowed)</div><div class="line">·</div><div class="line">Authorization:授权信息，当客户端接收到来自服务器的WWW-Authenticate响应时，可以用该头部的身份验证信息给web服务器进行认证,比如说Bearer token认证</div><div class="line">·</div><div class="line">Cache-Control:服务器缓存控制指令。no-cache表示不使用缓存，要求从服务器请求内容；max-age表示只接受Age值小于max-age的内容，即没有过期的请求对象</div><div class="line">-----------------------</div><div class="line">content-length:声明本次回应的数据长度</div><div class="line">·</div><div class="line">Expires:web服务器表明该实体在什么时候过期</div><div class="line">·</div><div class="line">Server:服务器名称信息，比如Nginx、Openrestry等</div><div class="line">·</div><div class="line">Content-Type:web服务器响应的类型，与Accept对应</div></pre></td></tr></table></figure></p>
<p>浏览器发起请求时，会根据头部域字段进行判断是否进行缓存读取，大致流程如下图：</p>
<p><img src="http://onjm2392k.bkt.clouddn.com/renpingjun/wewew.png" alt="浏览器请求缓存判断过程"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTTP协议是WWW服务器和用户请求代理（浏览器）之间通过应答请求模式传输超文本内容（html、css、js、图片、接口数据等）的一种协议。&lt;/p&gt;
&lt;p&gt;HTTP协议经过了从1.0到2.0的发展，HTTP2相比较与HTTP1有以下几个明显的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li
    
    </summary>
    
    
      <category term="http" scheme="http://www.renpingjun.top/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript正则表达式匹配汉字</title>
    <link href="http://www.renpingjun.top/2017/10/18/h473djdgs/"/>
    <id>http://www.renpingjun.top/2017/10/18/h473djdgs/</id>
    <published>2017-10-18T12:03:00.000Z</published>
    <updated>2018-05-27T02:50:28.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-正则汉字匹配现状"><a href="#一-正则汉字匹配现状" class="headerlink" title="一 正则汉字匹配现状"></a>一 正则汉字匹配现状</h2><p>在谷歌搜索「JavaScript 正则表达式匹配汉字」的时候，前几条结果全都是 /[\u4e00-\u9fa5]/。没有人怀疑这个正则表达式有什么问题，那么在 2018 年的今天，让我们站在 Chrome 64 的肩膀上，放飞一下自我。</p>
<p>汉文（Han Script）是汉语、日本语、朝鲜语、韩国语的书写系统中的一种文字（Script），越南语在早期也曾在书写系统中使用汉文[1]。汉字（CJK Ideograph）是汉文的基本单元。各国都对汉字提出了自己的编码标准，Unicode 将这些标准加总在一起进行统一编码，力求实现原标准与 Unicode 编码之间的无损转换。Unicode 从语义（semantic）、抽象字形（abstract shape），具体字形（typeface）三个维度[2]出发，把不同编码标准里「起源相同、本义相同、形状一样或稍异」的汉字赋予相同编码，这些被编码的字符称为中日韩统一表意文字（下文我们提到的「汉字」，如果不加说明，均指代中日韩统一表意文字）。如果把它们全部列举出来写成正则表达式，那么就是技术上完整的匹配汉字的正则表达式了。</p>
<p>正则表达式 /[\u4e00-\u9fa5]/的意思是匹配所有从 U+4E00, cjk unified ideograph-4e00 到 U+9FA5, cjk unified ideograph-9fa5 的字符。这一段区域对应的是 Unicode 1.0.1 就收录进来的中日韩统一表意文字（CJK Unified Ideographs）区块，在 Unicode 3.0 加入扩展 A 区以前，这个正则表达式确实给出了所有汉字的编码。换言之，从1992年到1999年，这个正则表达式确实是正确的，想必这个表达式已经有20年历史了。</p>
<h2 id="二-匹配所有统一表意文字"><a href="#二-匹配所有统一表意文字" class="headerlink" title="二 匹配所有统一表意文字"></a>二 匹配所有统一表意文字</h2><p>然而时光飞逝，Unicode 在2017年6月发布了10.0.0版本。在这20年间，Unicode 添加了许多汉字。比如 Unicode 8.0 添加的 109 号化学元素「鿏（⿰⻐麦）」，其码点是 9FCF，不在这个正则表达式范围中。而如果我们期望程序里的 /[\u4e00-\u9fa5]/可以与时俱进匹配最新的 Unicode 标准，显然是不现实的事情。因此，我们需要换一个思路，写一个无需维护的正则表达式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/\p&#123;Unified_Ideograph&#125;/u</div></pre></td></tr></table></figure></p>
<p>其中 \u是 ECMAScript 2015 定义的正则表达式标志，意味着将表达式作为 Unicode 码点序列。 \p是正在提案阶段的正则表达式 Unicode 属性转义，它赋予了我们根据 Unicode 字符的属性数据[3]构造表达式的能力。 Unified_Ideograph是 Unicode 字符的一个二值属性，对于汉字，其取值为 Yes，否则为 No。因此\p{Unified_Ideograph}匹配所有满足 Unified_Ideograph=yes的 Unicode 字符，而它的底层实现由运行时所依赖的 Unicode 版本决定，开发者不需要知道汉字的具体 Unicode 码点范围。</p>
<h2 id="三-容易混淆的其他-Unicode-属性转义表达式"><a href="#三-容易混淆的其他-Unicode-属性转义表达式" class="headerlink" title="三 容易混淆的其他 Unicode 属性转义表达式"></a>三 容易混淆的其他 Unicode 属性转义表达式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/\p&#123;Ideographic&#125;/u</div></pre></td></tr></table></figure>
<p>这个表达式匹配所有满足 Ideographic=yes的 Unicode 字符。我们先看一下 UAX #44 对这个属性的解释：</p>
<p>Characters considered to be CJKV (Chinese, Japanese, Korean, and Vietnamese) or other siniform (Chinese writing-related) ideographs. This property roughly defines the class of “Chinese characters” and does not include characters of other logographic scripts such as Cuneiform or Egyptian Hieroglyphs.</p>
<p>这个属性表明该字符属于 CJKV 表意文字或者与汉语书写相关的其他表意文字（如西夏文、女书），这个属性粗略地定义了「中文字符」的分类。</p>
<h2 id="四-浏览器兼容性支持"><a href="#四-浏览器兼容性支持" class="headerlink" title="四 浏览器兼容性支持"></a>四 浏览器兼容性支持</h2><p>截至2018年1月，只有 Chrome 64 支持正则表达式 Unicode 属性转义。对于其他浏览器，我们需要用 babel转译插件@babel/plugin-proposal-unicode-property-regex的底层将带有属性转义的正则表达式转为 Unicode 码点正则表达式或者 ES 5 的正则表达式。转译结果的在线演示可以在这里查看，用户可以自己在上面转译其他的 Unicode 属性转义正则表达式。我们在这里列举 /\p{Unified_Ideograph}/u转译成Unicode 码点正则表达式的结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const regex = /\p&#123;Unified_Ideograph&#125;/u;</div><div class="line">// transpiled to ES6:</div><div class="line">const regex =/[\u3400-\u4DB5\u4E00-\u9FEA\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA1F\uFA21\uFA23\uFA24\uFA27-\uFA29\u&#123;20000&#125;-\u&#123;2A6D6&#125;\u&#123;2A700&#125;-\u&#123;2B734&#125;\u&#123;2B740&#125;-\u&#123;2B81D&#125;\u&#123;2B820&#125;-\u&#123;2CEA1&#125;\u&#123;2CEB0&#125;-\u&#123;2EBE0&#125;]/u;</div></pre></td></tr></table></figure>
<p>该插件还可以使用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;plugins&quot;: [</div><div class="line">    [&quot;@babel/plugin-proposal-unicode-property-regex&quot;, &#123; &quot;useUnicodeFlag&quot;: false &#125;]</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>配置将表达式转成 ES5 的传统的以字符的 UTF16 表示为序列的字符串，这里不再赘述。</p>
<ul>
<li>input 元素的 pattern 属性</li>
</ul>
<p>在前端技术中，除了JavaScript会用到正则表达式，HTML 里<input>元素的pattern属性也会用到正则表达式。与 JavaScript 相比，pattern不支持设置正则表达式的标志位，因此 HTML 标准中强制规定了 input 元素的 pattern 属性需要施加unicode标志 [6]。目前只有 Chrome 53+, Firefox 遵循了这一标准，其他的浏览器暂未支持。</p>
<p>在 React/Angular/Vue.js 三大前端框架中，Angular 提供了近似于 pattern 的指令 ngPattern。目前ngPattern尚未施加unicode标志 [7]。AngularJS 的 ngPattern directive 仍未施加。</p>
<p>在大部分情况，是否施加unicode标志不会对正则表达式产生语义区别。主要的差别在于，在使用\u{10000}表示 Unicode 码点字符情形，正则表达式/\u{10000}/代表匹配u一万次，/\u{10000}/u匹配字符\u{10000}一次；/./只匹配 BMP 平面的字符，/./u匹配所有平面的字符。</p>
<p>由于 Unicode 属性转义正则表达式依赖于标识位\u，因此下面的用法目前只能在 Chrome 下使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;text&quot; pattern=&quot;\p&#123;Unified_Ideograph&#125;&quot;&gt;</div></pre></td></tr></table></figure>
<p>因此，如果需要兼容其他浏览器，可以使用转译插件的底层库regexpu-core在 js 层转换正则表达式，再把转换结果输送到 HTML 模版中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const rewritePattern = require(&quot;regexpu-core&quot;);</div><div class="line">rewritePattern(&apos;\\p&#123;Unified_Ideograph&#125;&apos;, &apos;u&apos;, &#123;</div><div class="line">  &apos;unicodePropertyEscape&apos;: true,</div><div class="line">  &apos;useUnicodeFlag&apos;: false</div><div class="line">&#125;);</div><div class="line">// → &apos;/(?:[\u3400-\u4DB5\u4E00-\u9FEA\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA1F\uFA21\uFA23\uFA24\uFA27-\uFA29]|[\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0])/&apos;</div></pre></td></tr></table></figure>
<h2 id="五-总结"><a href="#五-总结" class="headerlink" title="五 总结"></a>五 总结</h2><ul>
<li><p>/[\u4e00-\u9fa5]/是错的，不要用二十年前的正则表达式了。</p>
</li>
<li><p>/\p{Unified_Ideograph}/u是正确的，不需要维护，匹配所有汉字。这里\p是 Unicode 属性转义正则表达式。</p>
</li>
<li><p>/\p{Ideographic}/u 和 /\p{Script=Han}/u 匹配了除了汉字以外的其他一些字符，在「汉字匹配正则表达式」这个需求下，是错的。</p>
</li>
<li><p>目前只有 Chrome 支持 Unicode 属性转义正则表达式。对其他环境，使用@babel/plugin-proposal-unicode-property-regex 和 regexpu-core 进行优雅降级。</p>
</li>
</ul>
<p><strong><em> 阅读原文：<a href="https://qianduan.group/posts/5a6ede120cf6b624d2239c8b" target="_blank" rel="external">https://qianduan.group/posts/5a6ede120cf6b624d2239c8b</a> </em></strong></p>
<p><img src="http://onjm2392k.bkt.clouddn.com/renpingjun/vgrefs548hf347hd23ie9ysh23.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-正则汉字匹配现状&quot;&gt;&lt;a href=&quot;#一-正则汉字匹配现状&quot; class=&quot;headerlink&quot; title=&quot;一 正则汉字匹配现状&quot;&gt;&lt;/a&gt;一 正则汉字匹配现状&lt;/h2&gt;&lt;p&gt;在谷歌搜索「JavaScript 正则表达式匹配汉字」的时候，前几条结果全都
    
    </summary>
    
    
      <category term="正则表达式" scheme="http://www.renpingjun.top/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="JavaScript" scheme="http://www.renpingjun.top/tags/JavaScript/"/>
    
  </entry>
  
</feed>
